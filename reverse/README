Задания категории Reverse Engineering

100 Баллов - Berkeley
    В данном задании участникам необходимо познакомиться с
    механизмом фильтрации BPF. Исследуемое приложение создает
    сокет, выставляет для него фильтры и ждет подключения.
    В фильтре описан UDP-пакет, со следующими параметрами :
      * Адрес отправителя - 192.168.0.1
      * Порт источника    - 17352
      * Порт назначения   - 34807
      * TTL               - 17
      * Размер данных     - 32 байта
    Подобный пакет можно сформировать при помощи утилиты hping3
    hping3 -c 1 -t 17 -2 -s 17352 -p 34807 --spoof 192.168.0.1 -d 32 --file payload x.x.x.x
    Где
	x.x.x.x  - адрес машины, на которой запущено приложение
	payload  - файл, содержащий данные для отправки
    Оригинальное содержимое payload (оно же Флаг) следующее
    -----------------------------------------------------------------------
		   Флаг - a3b5a9184bd596f3135f69d5439b0251
    -----------------------------------------------------------------------

150 Баллов - Lempel-Ziv
    Для решения задания Lempel-Ziv пользователю
    предоставляется бинарный файл, содержащий логику
    алгоритма сжатия, а также файл преобразованный
    по средствам выше упомянутого алгоритма.
    В полученном пользователем исполняемом файле
    отсутствует механизм распаковки.
    Для решения задания необходимо:
    	* Понять какой алгоритм сжатия был использован
	* Реализовать логику для распаковки файла
	  содержащего изображение с флагом.
    HINTS:
	1. John F. Reiser
	2. -static
	3. Terry Archer Welch
    ----------------------------------------------------------------------
                     SHA256 оригинального изображения
       b3ba14bcb192c8ec4c5ef7158175556809f473016cd3a0b050da8d655f8858f5
    ----------------------------------------------------------------------
    Информация содержащаяся на изображении - MD5(c0mp9|e5510n_d03s_m4tt3r)
    ----------------------------------------------------------------------
		   Флаг - 6bf09ba96471c151d87aacfb682b53a4
    ----------------------------------------------------------------------


200 Баллов - x87
    Задание состоит из одного бинарного файла, который
    запрашивает у пользователя пароль и, в случае успеха,
    сообщает обратно информацию о флаге. Название данного
    задания отображает суть внутренней работы - основная
    часть проверки построена на базе математического
    сопроцессора, который изначально носил название x87.
    Данное задание может быть интересно по нескольким
    причинам
      * Нет явной взаимосвязи между внутренними функциями
      * Используется модель Signal-Driven IO
      * Нет открытых строк
      * Проверяющий код перемешан с библиотечным в специальной
      	секции кода.
    Схема проверки пароля тривиальна - по заданному ключу,
    генерируется набор индексов для массива xor-символов.
    Затем определенная последовательность преобразуется и
    сравнивается с эталонным значением.
    Набор индексов генерируется следующим образом:
    	* Расшифровывается оригинальный ключ
	* Каждый символ пользовательского ввода сопоставляется
	  соответствующему символу оригинального ключа.
	  Если символ пользовательского ввода больше (в ascii
	  понятии), чем соответствующий символ оригинального
	  ключа, то индексом в xor-таблице становится их
	  разность. В противном случае индексом становится
	  заведомо ложное значение (которое далее отсеивается),
	  что приводит к некорректному преобразованию
	  оригинального ключа.
	* Полученная последовательность xor-индексов используется
	  для преобразования оригинального ключа.
	* Преобразованный оригинальный ключ сопоставляется с
	  заранее известным значением, и если они равны, пользователь
	  получает уведомление об успешном решении задания в виде
	  следующей строки
	      [+] Correct! Submit md5(password) as the flag
	  В случае некорректного ввода, сообщение выглядит так
	      [!] Wrong password
	  Данные сообщения не хранятся в открытом виде и
	  расшифровываются при наступлении определенного события.
    HINTS:
	1. Какие модели ввода/вывода вам знакомы?
	2. Внимательнее к названию.
	3. Не все секции одинаково полезны.
    ----------------------------------------------------
    Корректный пароль - 6eafee5dfe8fbf2beafceecc93f8eadd
    ----------------------------------------------------
	   Флаг - fad71ee6899fdb2f8faa691d6d5be915
    ----------------------------------------------------
    
	
300 Баллов - LLR
    Образ системы загружается в виртуальную машину,
    после загрузки образа пользователь получает шелл
    с тремя доступными командами
      * ls
      * cat
      * help
    Их функциональность, соответственно
      * Получить список файлов текущей директории
      * Прочитать файл
      * Получить небольшую справку по командам
    Что нужно сделать :
    	После выполнения команды *ls* видим файл *flag*
	пытаемся сделать *cat flag*, видим запрос пароля
	Вводим корректный пароль - узнаем, что флаг есть
	некоторая функция от пароля, сама функция представлена
	в виде кода на *python*
    HINTS:
	1. Стандартный адрес загрузчика 0x7C00
	2. Адрес загрузки активной нагрузки 0x500
	3. Решение есть путь
    Решение:
	Флаг является определенным маршрутом в лабиринте
	Лабиринт выглядит следующим образом
		0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0
		0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0
		0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0
		0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1
		0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0
		0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0
		0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0
		1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0
		0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0
	Где 0 - доступный ячейка для следующего хода,
	и, соответственно 1 - недоступная.
	Флаг определен над следующим алфавитом
	     	       A I R _
	A - шаг влево
	I - шаг вправо
	R - шаг вверх
	_ - шаг вниз
	При каждом шаге в доступную ячейку - предыдущая
	станет недоступной - так достигается единственность
	решения.
	Функция от пароля выглядит следующим образом
	
	#!/usr/bin/python2.7
	from hashlib import md5
	print reduce(lambda x, y: md5(x).hexdigest(), xrange(100000), password)

	На выходе получаем md5-сумму, которая и является флагом.
	Размерность алфавита невелика, отсюда 100к итераций md5
	----------------------------------------------------------------------
	Корректная последовательность шагов - ______IIRRIIIRRARRIII____I___II_
	----------------------------------------------------------------------
			Флаг - f031ae1ee3c124d4a029b59ab1f80d90
	----------------------------------------------------------------------
	